x-shared-env: &shared-env
  MOCK_DATA_PATH: mock_data/mock_github_events.json
  KAFKA_BOOTSTRAP_SERVERS: kafka:9092
  KAFKA_PR_EVENTS_TOPIC: PR_events
  KAFKA_NEW_PR_EVENTS_TOPIC: new_PR_events
  KAFKA_REVIEWER_REPORT_TOPIC: reviewer_reports
  KAFKA_REVIEWER_RECOMMENDATION_TOPIC: reviewer_recommendations
  KAFKA_GRAPH_SERVICE_GROUP_ID: graph_service_group
  KAFKA_REVIEWER_SCORING_SERVICE_GROUP_ID: reviewer_scoring_service_group
  KAFKA_REVIEWER_RECOMMENDATION_SERVICE_GROUP_ID: reviewer_recommendation_service_group
  OPENAI_API_KEY: ${OPENAI_API_KEY}

services:
  zookeeper:
    image: bitnami/zookeeper:latest
    container_name: zookeeper
    ports:
      - "22181:2181"
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes

  kafka:
    image: bitnami/kafka:3.5
    container_name: kafka
    ports:
      - "9092:9092"
    environment:
      - KAFKA_BROKER_ID=1
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_CFG_LISTENERS=PLAINTEXT://0.0.0.0:9092,PLAINTEXT_HOST://0.0.0.0:9093
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:9093
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=PLAINTEXT
      - ALLOW_PLAINTEXT_LISTENER=yes

    depends_on:
      - zookeeper
  
  create-topics:
    image: bitnami/kafka:latest
    depends_on:
      - kafka
    container_name: create-topics
    entrypoint: [
      "bash", "-c",
      "sleep 10 && \
      kafka-topics.sh --bootstrap-server kafka:9092 --create --if-not-exists --topic PR_events --partitions 1 --replication-factor 1 && \
      kafka-topics.sh --bootstrap-server kafka:9092 --create --if-not-exists --topic new_PR_events --partitions 1 --replication-factor 1 && \
      kafka-topics.sh --bootstrap-server kafka:9092 --create --if-not-exists --topic reviewer_reports --partitions 1 --replication-factor 1 && \
      kafka-topics.sh --bootstrap-server kafka:9092 --create --if-not-exists --topic reviewer_recommendations --partitions 1 --replication-factor 1"
    ]

  ingestion-service:
    build:
      context: .
      dockerfile: ingestion-service/Dockerfile
    container_name: ingestion-service
    volumes:
      - ./ingestion-service/mock_data:/app/mock_data
      - ./common:/app/common
    tty: true
    depends_on:
      - kafka
      - create-topics
    entrypoint: ["./common/scripts/wait-for-it.sh", "kafka:9092", "--", "python", "main.py"]
    environment:
      PYTHONPATH: /app
      <<: *shared-env

  graph-service:
    build:
      context: .
      dockerfile: graph-service/Dockerfile
    container_name: graph-service
    volumes:
      - ./common:/app/common
    ports:
    - "8000:8000"
    depends_on:
      - ingestion-service
    entrypoint: ["./common/scripts/wait-for-it.sh", "kafka:9092", "--", "python", "main.py"]
    environment:
      PYTHONPATH: /app
      <<: *shared-env
  
  reviewer-scoring-service:
    build:
      context: .
      dockerfile: reviewer-scoring-service/Dockerfile
    container_name: reviewer-scoring-service
    volumes:
      - ./common:/app/common
    depends_on:
      - graph-service
    entrypoint: ["./common/scripts/wait-for-it.sh", "kafka:9092", "--", "python", "main.py"]
    environment:
      PYTHONPATH: /app
      <<: *shared-env
  
  reviewer-recommendation-service:
    build:
      context: .
      dockerfile: reviewer-recommendation-service/Dockerfile
    container_name: reviewer-recommendation-service
    volumes:
      - ./common:/app/common
    depends_on:
      - reviewer-scoring-service
    entrypoint: ["./common/scripts/wait-for-it.sh", "kafka:9092", "--", "python", "main.py"]
    environment:
      PYTHONPATH: /app
      <<: *shared-env